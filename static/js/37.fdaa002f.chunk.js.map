{"version":3,"sources":["app/views/sessions/JwtLogin.jsx"],"names":["FlexBox","styled","Box","display","alignItems","JustifyBox","justifyContent","ContentBox","height","padding","position","background","JWTRoot","minHeight","maxWidth","margin","borderRadius","initialValues","email","password","remember","validationSchema","Yup","shape","min","required","JwtLogin","theme","useTheme","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","loading","setLoading","login","useAuth","handleFormSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","wrap","_context","prev","next","t0","stop","_x","apply","arguments","_jsx","children","Card","className","_jsxs","Grid","container","item","sm","xs","p","sx","minWidth","src","width","alt","Formik","onSubmit","_ref2","errors","touched","handleChange","handleBlur","handleSubmit","TextField","fullWidth","size","type","name","label","variant","onBlur","value","onChange","helperText","error","Boolean","mb","gap","Checkbox","checked","Paragraph","NavLink","to","style","color","palette","primary","main","LoadingButton","my","marginLeft"],"mappings":"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","file":"static/js/37.fdaa002f.chunk.js","sourcesContent":["import { LoadingButton } from '@mui/lab';\nimport { Card, Checkbox, Grid, TextField } from '@mui/material';\nimport { Box, styled, useTheme } from '@mui/system';\nimport { Paragraph } from 'app/components/Typography';\nimport useAuth from 'app/hooks/useAuth';\nimport { Formik } from 'formik';\nimport { useState } from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\n\nconst FlexBox = styled(Box)(() => ({ display: 'flex', alignItems: 'center' }));\n\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: 'center' }));\n\nconst ContentBox = styled(Box)(() => ({\n  height: '100%',\n  padding: '32px',\n  position: 'relative',\n  background: 'rgba(0, 0, 0, 0.01)',\n}));\n\nconst JWTRoot = styled(JustifyBox)(() => ({\n  background: '#1A2038',\n  minHeight: '100% !important',\n  '& .card': {\n    maxWidth: 800,\n    minHeight: 400,\n    margin: '1rem',\n    display: 'flex',\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n}));\n\n// inital login credentials\nconst initialValues = {\n  email: 'jason@ui-lib.com',\n  password: 'dummyPass',\n  remember: true,\n};\n\n// form field validation schema\nconst validationSchema = Yup.object().shape({\n  password: Yup.string()\n    .min(6, 'Password must be 6 character length')\n    .required('Password is required!'),\n  email: Yup.string().email('Invalid Email address').required('Email is required!'),\n});\n\nconst JwtLogin = () => {\n  const theme = useTheme();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n\n  const { login } = useAuth();\n\n  const handleFormSubmit = async (values) => {\n    setLoading(true);\n    try {\n      await login(values.email, values.password);\n      navigate('/');\n    } catch (e) {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <JWTRoot>\n      <Card className=\"card\">\n        <Grid container>\n          <Grid item sm={6} xs={12}>\n            <JustifyBox p={4} height=\"100%\" sx={{ minWidth: 320 }}>\n              <img src=\"/assets/images/illustrations/dreamer.svg\" width=\"100%\" alt=\"\" />\n            </JustifyBox>\n          </Grid>\n\n          <Grid item sm={6} xs={12}>\n            <ContentBox>\n              <Formik\n                onSubmit={handleFormSubmit}\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n              >\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\n                  <form onSubmit={handleSubmit}>\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      type=\"email\"\n                      name=\"email\"\n                      label=\"Email\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.email}\n                      onChange={handleChange}\n                      helperText={touched.email && errors.email}\n                      error={Boolean(errors.email && touched.email)}\n                      sx={{ mb: 3 }}\n                    />\n\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      name=\"password\"\n                      type=\"password\"\n                      label=\"Password\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.password}\n                      onChange={handleChange}\n                      helperText={touched.password && errors.password}\n                      error={Boolean(errors.password && touched.password)}\n                      sx={{ mb: 1.5 }}\n                    />\n\n                    <FlexBox justifyContent=\"space-between\">\n                      <FlexBox gap={1}>\n                        <Checkbox\n                          size=\"small\"\n                          name=\"remember\"\n                          onChange={handleChange}\n                          checked={values.remember}\n                          sx={{ padding: 0 }}\n                        />\n\n                        <Paragraph>Remember Me</Paragraph>\n                      </FlexBox>\n\n                      <NavLink\n                        to=\"/session/forgot-password\"\n                        style={{ color: theme.palette.primary.main }}\n                      >\n                        Forgot password?\n                      </NavLink>\n                    </FlexBox>\n\n                    <LoadingButton\n                      type=\"submit\"\n                      color=\"primary\"\n                      loading={loading}\n                      variant=\"contained\"\n                      sx={{ my: 2 }}\n                    >\n                      Login\n                    </LoadingButton>\n\n                    <Paragraph>\n                      Don't have an account?\n                      <NavLink\n                        to=\"/session/signup\"\n                        style={{ color: theme.palette.primary.main, marginLeft: 5 }}\n                      >\n                        Register\n                      </NavLink>\n                    </Paragraph>\n                  </form>\n                )}\n              </Formik>\n            </ContentBox>\n          </Grid>\n        </Grid>\n      </Card>\n    </JWTRoot>\n  );\n};\n\nexport default JwtLogin;\n"],"sourceRoot":""}