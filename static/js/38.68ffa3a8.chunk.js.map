{"version":3,"sources":["app/views/sessions/JwtRegister.jsx"],"names":["FlexBox","styled","Box","display","alignItems","JustifyBox","justifyContent","ContentBox","height","padding","background","JWTRegister","minHeight","maxWidth","margin","borderRadius","initialValues","email","password","username","remember","validationSchema","Yup","shape","min","required","JwtRegister","theme","useTheme","register","useAuth","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_jsx","children","Card","className","_jsxs","Grid","container","item","sm","xs","width","alt","src","p","Formik","onSubmit","values","e","console","log","_ref","errors","touched","handleChange","handleBlur","handleSubmit","TextField","fullWidth","size","type","name","label","variant","onBlur","value","onChange","helperText","error","Boolean","sx","mb","gap","Checkbox","checked","Paragraph","fontSize","LoadingButton","color","mt","NavLink","to","style","palette","primary","main","marginLeft"],"mappings":"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","file":"static/js/38.68ffa3a8.chunk.js","sourcesContent":["import { useTheme } from '@emotion/react';\nimport { LoadingButton } from '@mui/lab';\nimport { Card, Checkbox, Grid, TextField } from '@mui/material';\nimport { Box, styled } from '@mui/system';\nimport { Paragraph } from 'app/components/Typography';\nimport useAuth from 'app/hooks/useAuth';\nimport { Formik } from 'formik';\nimport { useState } from 'react';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\n\nconst FlexBox = styled(Box)(() => ({ display: 'flex', alignItems: 'center' }));\n\nconst JustifyBox = styled(FlexBox)(() => ({ justifyContent: 'center' }));\n\nconst ContentBox = styled(JustifyBox)(() => ({\n  height: '100%',\n  padding: '32px',\n  background: 'rgba(0, 0, 0, 0.01)',\n}));\n\nconst JWTRegister = styled(JustifyBox)(() => ({\n  background: '#1A2038',\n  minHeight: '100vh !important',\n  '& .card': {\n    maxWidth: 800,\n    minHeight: 400,\n    margin: '1rem',\n    display: 'flex',\n    borderRadius: 12,\n    alignItems: 'center',\n  },\n}));\n\n// inital login credentials\nconst initialValues = {\n  email: '',\n  password: '',\n  username: '',\n  remember: true,\n};\n\n// form field validation schema\nconst validationSchema = Yup.object().shape({\n  password: Yup.string()\n    .min(6, 'Password must be 6 character length')\n    .required('Password is required!'),\n  email: Yup.string().email('Invalid Email address').required('Email is required!'),\n});\n\nconst JwtRegister = () => {\n  const theme = useTheme();\n  const { register } = useAuth();\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(false);\n\n  const handleFormSubmit = (values) => {\n    setLoading(true);\n\n    try {\n      register(values.email, values.username, values.password);\n      navigate('/');\n      setLoading(false);\n    } catch (e) {\n      console.log(e);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <JWTRegister>\n      <Card className=\"card\">\n        <Grid container>\n          <Grid item sm={6} xs={12}>\n            <ContentBox>\n              <img\n                width=\"100%\"\n                alt=\"Register\"\n                src=\"/assets/images/illustrations/posting_photo.svg\"\n              />\n            </ContentBox>\n          </Grid>\n\n          <Grid item sm={6} xs={12}>\n            <Box p={4} height=\"100%\">\n              <Formik\n                onSubmit={handleFormSubmit}\n                initialValues={initialValues}\n                validationSchema={validationSchema}\n              >\n                {({ values, errors, touched, handleChange, handleBlur, handleSubmit }) => (\n                  <form onSubmit={handleSubmit}>\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      type=\"text\"\n                      name=\"username\"\n                      label=\"Username\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.username}\n                      onChange={handleChange}\n                      helperText={touched.username && errors.username}\n                      error={Boolean(errors.username && touched.username)}\n                      sx={{ mb: 3 }}\n                    />\n\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      type=\"email\"\n                      name=\"email\"\n                      label=\"Email\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.email}\n                      onChange={handleChange}\n                      helperText={touched.email && errors.email}\n                      error={Boolean(errors.email && touched.email)}\n                      sx={{ mb: 3 }}\n                    />\n                    <TextField\n                      fullWidth\n                      size=\"small\"\n                      name=\"password\"\n                      type=\"password\"\n                      label=\"Password\"\n                      variant=\"outlined\"\n                      onBlur={handleBlur}\n                      value={values.password}\n                      onChange={handleChange}\n                      helperText={touched.password && errors.password}\n                      error={Boolean(errors.password && touched.password)}\n                      sx={{ mb: 2 }}\n                    />\n\n                    <FlexBox gap={1} alignItems=\"center\">\n                      <Checkbox\n                        size=\"small\"\n                        name=\"remember\"\n                        onChange={handleChange}\n                        checked={values.remember}\n                        sx={{ padding: 0 }}\n                      />\n\n                      <Paragraph fontSize={13}>\n                        I have read and agree to the terms of service.\n                      </Paragraph>\n                    </FlexBox>\n\n                    <LoadingButton\n                      type=\"submit\"\n                      color=\"primary\"\n                      loading={loading}\n                      variant=\"contained\"\n                      sx={{ mb: 2, mt: 3 }}\n                    >\n                      Regiser\n                    </LoadingButton>\n\n                    <Paragraph>\n                      Already have an account?\n                      <NavLink\n                        to=\"/session/signin\"\n                        style={{ color: theme.palette.primary.main, marginLeft: 5 }}\n                      >\n                        Login\n                      </NavLink>\n                    </Paragraph>\n                  </form>\n                )}\n              </Formik>\n            </Box>\n          </Grid>\n        </Grid>\n      </Card>\n    </JWTRegister>\n  );\n};\n\nexport default JwtRegister;\n"],"sourceRoot":""}